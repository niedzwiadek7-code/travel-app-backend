generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Place {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  longitude String?
  latitude  String?
  address   String
  zipCode   String
  city      String
  country   String
}

model DateRange {
  id   Int      @id @default(autoincrement())
  from DateTime
  to   DateTime

  ElementTravel         ElementTravel[]
  ElementTravelInstance ElementTravelInstance[]
}

enum Role {
  USER
  AGENCY_OWNER
  ADMIN
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  password  String
  role      Role   @default(USER)

  // questions
  travels TravelRecipe[]
  Answer  Answer[]
}

model TravelRecipe {
  id      Int    @id @default(autoincrement())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId Int

  // travel instance
  travelElements ElementTravel[]
}

model ElementTravel {
  id             Int          @id @default(autoincrement())
  dataRange      DateRange    @relation(fields: [dateRangeId], references: [id])
  dateRangeId    Int
  activity       Activity     @relation(fields: [activityId], references: [id])
  activityId     Int
  travelRecipe   TravelRecipe @relation(fields: [travelRecipeId], references: [id])
  travelRecipeId Int
}

model Activity {
  id             Int          @id @default(autoincrement())
  accepted       Boolean
  name           String
  description    String
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int

  // prices
  // questions
  // ratings
  elementTravels ElementTravel[]
}

model ActivityParameter {
  id                      Int                   @id @default(autoincrement())
  value                   String
  activityTypeParameter   ActivityTypeParameter @relation(fields: [activityTypeParameterId], references: [id])
  activityTypeParameterId Int
}

model ActivityType {
  id   Int    @id @default(autoincrement())
  name String

  Activity              Activity[]
  ActivityTypeParameter ActivityTypeParameter[]
}

model ActivityTypeParameter {
  id             Int          @id @default(autoincrement())
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int

  ActivityParameter ActivityParameter[]
}

model Answer {
  id       Int    @id @default(autoincrement())
  answer   String
  author   User   @relation("author", fields: [authorId], references: [id])
  authorId Int

  // question
  // likes
  // dislikes
}

model CategoryRating {
  id       Int    @id @default(autoincrement())
  category String
  value    Int

  // rating
}

model ElementTravelInstance {
  id          Int       @id @default(autoincrement())
  dataRange   DateRange @relation(fields: [dataRangeId], references: [id])
  dataRangeId Int

  // photos
  // travel instance
  ElementTravelPhoto ElementTravelPhoto[]
}

model ElementTravelPhoto {
  id                      Int                   @id @default(autoincrement())
  url                     String
  elementTravel           ElementTravelInstance @relation(fields: [elementTravelInstanceId], references: [id])
  elementTravelId         Int
  elementTravelInstanceId Int
}
