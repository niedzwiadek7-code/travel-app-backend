generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Place {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  longitude String?
  latitude  String?
  address   String
  zipCode   String
  city      String
  country   String
}

model DateRange {
  id   Int      @id @default(autoincrement())
  from DateTime @db.Timestamp()
  to   DateTime @db.Timestamp()

  ElementTravel         ElementTravel[]
  ElementTravelInstance ElementTravelInstance[]
  TravelInstance        TravelInstance[]
}

enum Role {
  USER
  AGENCY_OWNER
  ADMIN
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  password  String
  role      Role   @default(USER)

  questions Question[]
  travels   TravelRecipe[]
  Authors   Answer[]
  Rating    Rating[]

  likeAnswers      Answer[]   @relation("likeAnswers")
  dislikeAnswers   Answer[]   @relation("dislikeAnswers")
  likeQuestions    Question[] @relation("likeQuestions")
  dislikeQuestions Question[] @relation("dislikeQuestions")
}

model TravelRecipe {
  id      Int    @id @default(autoincrement())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId Int

  travelElements ElementTravel[]
  TravelInstance TravelInstance[]
}

model ElementTravel {
  id             Int          @id @default(autoincrement())
  dataRange      DateRange    @relation(fields: [dateRangeId], references: [id])
  dateRangeId    Int
  activity       Activity     @relation(fields: [activityId], references: [id])
  activityId     Int
  travelRecipe   TravelRecipe @relation(fields: [travelRecipeId], references: [id])
  travelRecipeId Int
}

model Activity {
  id             Int          @id @default(autoincrement())
  accepted       Boolean
  name           String
  description    String
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int

  questions      Question[]
  price          Price[]
  elementTravels ElementTravel[]
  Rating         Rating[]
}

model ActivityParameter {
  id                      Int                   @id @default(autoincrement())
  value                   String
  activityTypeParameter   ActivityTypeParameter @relation(fields: [activityTypeParameterId], references: [id])
  activityTypeParameterId Int
}

model ActivityType {
  id   Int    @id @default(autoincrement())
  name String

  Activity              Activity[]
  ActivityTypeParameter ActivityTypeParameter[]
}

model ActivityTypeParameter {
  id             Int          @id @default(autoincrement())
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int

  ActivityParameter ActivityParameter[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  likes    User[] @relation("likeAnswers")
  dislikes User[] @relation("dislikeAnswers")
}

model CategoryRating {
  id       Int    @id @default(autoincrement())
  category String
  value    Int
  rating   Rating @relation(fields: [ratingId], references: [id])
  ratingId Int
}

model ElementTravelInstance {
  id               Int            @id @default(autoincrement())
  dataRange        DateRange      @relation(fields: [dataRangeId], references: [id])
  dataRangeId      Int
  TravelInstance   TravelInstance @relation(fields: [travelInstanceId], references: [id])
  travelInstanceId Int

  ElementTravelPhoto ElementTravelPhoto[]
}

model ElementTravelPhoto {
  id                      Int                   @id @default(autoincrement())
  url                     String
  elementTravel           ElementTravelInstance @relation(fields: [elementTravelInstanceId], references: [id])
  elementTravelId         Int
  elementTravelInstanceId Int
}

model Price {
  id         Int      @id @default(autoincrement())
  price      Float
  startDate  DateTime @db.Timestamp()
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
}

model Question {
  id         Int      @id @default(autoincrement())
  question   String
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int

  answers Answer[]

  likes    User[] @relation("likeQuestions")
  dislikes User[] @relation("dislikeQuestions")
}

model Rating {
  id         Int      @id @default(autoincrement())
  text       String
  authror    User     @relation(fields: [authorId], references: [id])
  authorId   Int
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int

  categoryRating CategoryRating[]
}

model TravelInstance {
  id             Int          @id @default(autoincrement())
  travelRecipe   TravelRecipe @relation(fields: [travelRecipeId], references: [id])
  travelRecipeId Int
  dataRange      DateRange    @relation(fields: [dateRangeId], references: [id])
  dateRangeId    Int

  travelInstanceElements ElementTravelInstance[]
}
